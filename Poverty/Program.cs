using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using Poverty.util;

namespace Poverty
{
    public class Program
    {
        private static Lazy<Settings> _lazySettings = null!;
        private static Settings Settings => _lazySettings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Configuration", "settings.json", out _lazySettings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "PovertyPatch.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            int count = 0;

            // handle LVLI records
            if (Settings.Process_LVLI)
            {
                foreach (var lvli in state.LoadOrder.PriorityOrder.LeveledItem().WinningOverrides())
                {
                    if (!Settings.IsValidTarget(lvli))
                        continue;

                    var copy = lvli.DeepCopy();
                    int copyCount = count;

                    // do stuff

                    if (copyCount <= count)
                        continue;

                    state.PatchMod.LeveledItems.Set(copy);
                }
            }
            // handle REFR records
            if (Settings.Process_CONT)
            {
                foreach (var lvli in state.LoadOrder.PriorityOrder.LeveledItem().WinningOverrides())
                {
                    if (!Settings.IsValidTarget(lvli))
                        continue;

                    var copy = lvli.DeepCopy();
                    int copyCount = count;

                    // do stuff

                    if (copyCount <= count)
                        continue;

                    state.PatchMod.LeveledItems.Set(copy);
                }
            }

            Console.WriteLine($"Processed {count} record{(count > 1 ? "s" : "")}.");
        }
    }
}
